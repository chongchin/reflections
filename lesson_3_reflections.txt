When would you want to use a remote repository rather than keeping all your work
local?
	1) So that the code is available to others
	2) Acts as a backup also

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	1) Because I could be working on code that has first to be consistent with my local repository, 
	before considering changes made by others
   
Describe the differences between forks, clones, and branches. When would you use one instead of another?
    1) Fork is used to copy a repository in GitHub to another (user)repository in GitHub only. I will used it to copy another person's
	   repository in GitHub to mine. This is also noted in the orignal user's respository
	2 Clones is used copy a repository from GitHub to local repository or to another (user ) repository in GitHub. I will use 
      to copy a repository from  GitHub to my local respository	
	3) Branches are deviations from the master branch. I will use it if I wish to make experimental changes without affecting
	   main branch.
	   
What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
1) Automatic merging may be wrong, because GIT does not understand the logic used in the code
2) On the other hand, manual merging takes longer

What is the benefit of having a copy of the last known state of the remote stored locally?
1) You know what changes may have been made by others, and hence I can reconcile my changes with these these changes before pushing to remote	   

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
1) List out the classes that have been change
2) Study all the changes by each collaborator
3) Sit together and try to resolve the changes

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

1) If there are collaborators working simultaneoulsy, then a separate branch should be used.
2) Using branches allow others to inspect the changes before merging.
3) If there is only 1 developer, then working on the master is faster 
